import pandas as pd
import yfinance as yf
import numpy as np
import cvxpy as cp
import statsmodels.api as sm
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from datetime import datetime

class BetaCalculator:
    def __init__(self, tickers, start_date, end_date, market_index):
        self.tickers = tickers
        self.start_date = start_date
        self.end_date = end_date
        self.market_index = market_index
        self.data = None

    def download_data(self):
        data = yf.download(self.tickers + [self.market_index],
                           start=self.start_date,
                           end=self.end_date)["Adj Close"]
        self.data = pd.DataFrame(data)

    def calculate_betas(self):
        returns = self.data.pct_change().dropna()
        
        beta_df = pd.DataFrame(columns=['Ticker', 'Beta'])
        
        for ticker in self.tickers:
            y = returns[ticker]
            X = returns[self.market_index]
            X = sm.add_constant(X)
            
            model = sm.OLS(y, X)
            results = model.fit()
            
            beta = results.params[1]
            
            beta_df = pd.concat([beta_df, pd.DataFrame({'Ticker': ticker, 'Beta': beta}, index=[0])], ignore_index=True)
        
        return beta_df

    def save_to_excel(self, beta_df, filename):
        with pd.ExcelWriter(filename) as writer:
            beta_df.to_excel(writer, index=False)
    
    def plot_tickers_against_market(self, beta_df, output_filename):
        num_plots = len(beta_df)
        num_pages = int(np.ceil(num_plots / 3))

        with PdfPages(output_filename) as pdf:
            for i in range(num_pages):
                fig, axs = plt.subplots(3, 1, figsize=(8, 10))
                fig.subplots_adjust(hspace=0.5)

                start_idx = i * 3
                end_idx = min((i + 1) * 3, num_plots)

                for idx, row in beta_df.iloc[start_idx:end_idx].iterrows():
                    ticker = row['Ticker']
                    beta = row['Beta']

                    y = self.data[ticker]
                    X = self.data[self.market_index]

                    ax = axs[idx - start_idx]
                    ax.plot(X, color='red', label=self.market_index)
                    ax.set_xlabel('Date')
                    ax.set_ylabel(self.market_index)

                    ax2 = ax.twinx()
                    ax2.plot(y, color='black', label=ticker)
                    ax2.set_ylabel(ticker)

                    ax.set_title(f"{ticker} vs {self.market_index}")

                    ax.text(
                        0.95,
                        0.05,
                        f"Beta: {beta:.2f}",
                        ha='right',
                        va='center',
                        transform=ax.transAxes,
                        bbox=dict(facecolor='white', edgecolor='black', boxstyle='round'))

                    ax.legend(loc='upper left')

                plt.tight_layout()
                pdf.savefig(fig)
                plt.close(fig)

if __name__ == '__main__':
    tickers = [
        "AKBNK.IS", "AKSEN.IS", "ALARK.IS", "ARCLK.IS", "ASELS.IS", "BIMAS.IS", "EKGYO.IS", "ENKAI.IS", "EREGL.IS",
        "FROTO.IS", "GARAN.IS", "GUBRF.IS", "HEKTS.IS", "ISCTR.IS", "KCHOL.IS", "KOZAA.IS", "KOZAL.IS", "KRDMD.IS",
        "ODAS.IS", "PETKM.IS", "PGSUS.IS", "SAHOL.IS", "SASA.IS", "SISE.IS", "TAVHL.IS", "TCELL.IS", "THYAO.IS",
        "TOASO.IS", "TUPRS.IS", "YKBNK.IS"
    ]

    start_date = "2023-01-01"
    end_date = "2023-06-30"
    market_index = "XU030.IS"

    beta_calculator = BetaCalculator(tickers, start_date, end_date, market_index)
    beta_calculator.download_data()
    beta_df = beta_calculator.calculate_betas()
    beta_calculator.save_to_excel(beta_df, "beta_results.xlsx")
    beta_calculator.plot_tickers_against_market(beta_df, "beta_plots.pdf")
